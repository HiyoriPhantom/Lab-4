# Lab 4
# Jacqueline
# 16 December 


# this function will find the sum of all numbers divisible by 3 or 5 up to 999
def Mult_3_5():
    # blank list
    Mult3_5List = []

    # 334 so that it includes 999
    for i in range(334):
        # 0 doesn't count
        if i != 0:
            # append
            Mult3_5List.append(3*i)
        # 5 will get bigger faster so we need to stop it at 200
        if i != 0 and i < 200:
            # append
            Mult3_5List.append(5*i)

    # so that all duplicates will go away
    Mult3_5List = list(set(Mult3_5List)) 
    # sort from small to big
    Mult3_5List.sort()   
    print(Mult3_5List)
    Sum = 0
    # for each of the numbers, add them up
    for number in Mult3_5List:
        Sum = Sum + number

    print(Sum)
    return Sum



# this function finds the sum of all even fibonacci numbers less than 4 million
def EvenFibs():
    # Fib should start with 1, 1, 2! But for the purpose of this problem, it wants us to start with 1, 2
    FibsList = [1, 2]
    # this will also add values greater than 4 mil since it's just checking that the last index is < 4 mil, but they can be removed later
    while FibsList[len(FibsList) - 1] < 4000000:
        # append the addition of the last two items
        FibsList.append(FibsList[len(FibsList) - 1] + FibsList[len(FibsList) - 2])
    print(FibsList)
    Sum = 0
    # if % 2 is zero then that means no remainder, also make sure there's nothing > 4 mil
    for number in FibsList:
        if number%2 == 0 and number < 4000000:
            # add to sum
            Sum = Sum + number

    print(Sum)
    return Sum



# This function finds the prime factors of any given number
def Prime(BigNum): 
    PrimeFactors = []
    # using the fact that nothing bigger than half of a number can be a factor for that number
    for i in range(int(BigNum/2)):
        # the number that it's testing shouldn't be 0, 1, or bigger than the remaining BigNum
        if i != 0 and i != 1 and i <= BigNum:
            # when there's no remainder...
            while int(BigNum) % i == 0:
                # adds the number and divides the BigNum by that number
                PrimeFactors.append(int(i))
                BigNum = BigNum/i
                
        # if i has surpassed the size of the BigNum, exit the loop
        elif i > BigNum:
            break
    PrimeFactors.sort()
    print(PrimeFactors)
    return PrimeFactors

# This function finds the largest palindrome number that's a product of two three digit numbers
def PalinNum():
    Num1 = 999
    Num2 = 999
    HighScore = 0
    # only 3-digit numbers
    while Num1 > 100:
        while Num2 > 100:
            TryNum = Num1 * Num2

            # if the number is 6 digits
            if len(str(TryNum)) == 6:
                # see if it's a palindrome
                if str(TryNum)[0] == str(TryNum)[5] and str(TryNum)[1] == str(TryNum)[4] and str(TryNum)[2] == str(TryNum)[3]:
                    # if it is, update the high score if it's greater than the last high score
                    if TryNum > HighScore:
                        HighScore = TryNum
                # try the next possible combo
                Num2 = Num2 - 1

            else:
                # It's 5 digits
                # see if it's a palindrome
                if str(TryNum)[0] == str(TryNum)[4] and str(TryNum)[1] == str(TryNum)[3]:
                    # if it is, update the high score if it's greater than the last high score
                    if TryNum > HighScore:
                        HighScore = TryNum
                # try the next possible combo
                Num2 = Num2 - 1
                
        # next combo
        Num1 = Num1 - 1
        Num2 = 999
    print(HighScore)
    return HighScore
  
  
  
# this function finds the smallest multiple of 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
def SmallestMult():
    # has to be a multiple of 2520 = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10
    TryNum = 2520
    i = 1
    # checks all the mods - sees if they're divisible by all of these
    while TryNum % 11 != 0 or TryNum % 12 != 0 or TryNum % 13 != 0 or TryNum % 14 != 0 or TryNum % 15 != 0 or TryNum % 16 != 0 or TryNum % 17 != 0 or TryNum % 18 != 0 or TryNum % 19 != 0 or TryNum % 20 != 0:
        i = i + 1
        # multiply by 2520 so that we stay within multiple of it
        TryNum = i * 2520
    print(TryNum)
    return TryNum

# this function finds the difference between the sum of numbers squared up to 100 and the square of the sum of the numbers up to 100
def SumSquareDiff():
    SumOSquares = 0
    SquareOSums = 0
    # square all of the numbers up to 100 and keep them
    for i in range(101):
        SumOSquares = SumOSquares + i**2
    # add up all the numbers up to 100 and then square them
    for i in range(101):
        SquareOSums = SquareOSums + i
    SquareOSums = SquareOSums ** 2

    # take the difference
    print(SquareOSums - SumOSquares)
    return (SquareOSums - SumOSquares)

# this function creates a list of primes up to 10000
def BigPrime():
    ListOPrimes = []
    # up to a huge number that will find it for sure
    for i in range(500000):
        # check if prime
        if i != 1 and i != 0 and IsPrime(i):
            # keep adding to list of primes until there are more than 10001 
            ListOPrimes.append(i)
            if len(ListOPrimes) == 10002:
                return ListOPrimes[10001]


# This is a helper function for BigPrime, checks if a number is prime
def IsPrime(Num):
    # only need to check up to half of the number
    for i in range(int(Num/2)):
        if i != 0 and i != 1:
            if Num % i == 0:
                
                return False
    return True


# this function takes in a long list of digits and finds the biggest product made by 13 consecutive digits
def BigProduct(HugeNum):
    HighScore = 0
    Digits = ""
    for i in range(len(HugeNum) - 12):
        # tries each of the windows of 13 numbers
        TryProduct = int(HugeNum[i]) * int(HugeNum[i+1]) * int(HugeNum[i+2]) * int(HugeNum[i+3]) * int(HugeNum[i+4]) * int(HugeNum[i+5]) * int(HugeNum[i+6]) * int(HugeNum[i+7]) * int(HugeNum[i+8]) * int(HugeNum[i+9]) * int(HugeNum[i+10]) * int(HugeNum[i+11]) * int(HugeNum[i+12])
        # keeps a high score
        if TryProduct > HighScore:
            HighScore = TryProduct
            Digits = HugeNum[i:i+13]
    # return Digits
    return HighScore


    
### this is new stuff

# this function finds the pythagorean triplet where a + b + c = 1000
def PythTriplets():
    # in a strange scenario it would check 997, 2, and 1
    for a in range(998):
        for b in range(998):
            # c is the difference b/w a and b and 1000
            c = 1000 - a - b
            # can't have c < 2 or sides of 0 length
            if a < b < c and c > 2 and a != 0:
                # check if pythag triplet
                if a**2 + b**2 == c**2:
                    print(a,b,c)
                    return a*b*c


# this function finds the sum of all primes up to 2 million; takes a VERY long time to run
def SumPrimes():
    # PrimesList = []
    PrimeSum = 0
    for i in range(2000001):
    # check if prime, reusing IsPrime() :)
        if i != 1 and i != 0 and i % 2 != 0 and IsPrime(i):
            # keep adding to list of primes 
            # PrimesList.append(i)
            print(i)
            PrimeSum = PrimeSum + i 

    print(PrimeSum + 2)
    return(PrimeSum + 2)

    
# this function finds the highest product on a diagonal in a given grid of numbers haha since I knew they'd make the answer on a diagonal!
def GridProduct(GridList):
    HighScore = 0
    
    for i in range(17):
        for j in range(17):
            # the coordinate system is increasing downward and right, so these are finding the left to right diagonals
            TryProduct = GridList[i][j] * GridList[i + 1][j + 1] * GridList[i + 2][j + 2] * GridList[i + 3][j + 3]
            # Keeps the high score
            if TryProduct > HighScore:
                HighScore = TryProduct
            
    print(HighScore)

    # since the first right to left diagonal starts at the fourth index for i, I started i at 3
    for i in range(3, 17):
        for j in range(17):
            # These find the right to left diagonals
            TryProduct = GridList[i][j] * GridList[i - 1][j + 1] * GridList[i - 2][j + 2] * GridList[i - 3][j + 3]
            # Keeps the high score
            if TryProduct > HighScore:
                HighScore = TryProduct
    print(HighScore)
    return HighScore





if __name__ == "__main__":

    HugeNum = "73167176531330624919225119674426574\
74235534919493496983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"


    GridList = []

    R0 = [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8]

    R1 = [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0]

    R2 = [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65]

    R3 = [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91]

    R4 = [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80]

    R5 = [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50]

    R6 = [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70]

    R7 = [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21]

    R8 = [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72]

    R9 = [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95]

    R10 = [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92]

    R11 = [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57]

    R12 = [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58]

    R13 = [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40]

    R14 = [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66]

    R15 = [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69]

    R16 = [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36]

    R17 = [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16]

    R18 = [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54]

    R19 = [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]

    GridList.append(R0)
    GridList.append(R1)
    GridList.append(R2)
    GridList.append(R3)
    GridList.append(R4)
    GridList.append(R5)
    GridList.append(R6)
    GridList.append(R7)
    GridList.append(R8)
    GridList.append(R9)
    GridList.append(R10)
    GridList.append(R11)
    GridList.append(R12)
    GridList.append(R13)
    GridList.append(R14)
    GridList.append(R15)
    GridList.append(R16)
    GridList.append(R17)
    GridList.append(R18)
    GridList.append(R19)

    # print(GridList[11][0])

    GridProduct(GridList)


    # print(BigProduct(HugeNum))

